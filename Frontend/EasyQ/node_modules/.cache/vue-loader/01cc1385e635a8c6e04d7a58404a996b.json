{"remainingRequest":"/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/src/views/Instructor/InstructorCourseDetail.vue?vue&type=template&id=cbbbe9de&scoped=true&","dependencies":[{"path":"/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/src/views/Instructor/InstructorCourseDetail.vue","mtime":1648662229420},{"path":"/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/cache-loader/dist/cjs.js","mtime":1647973709718},{"path":"/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647973716574},{"path":"/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/cache-loader/dist/cjs.js","mtime":1647973709718},{"path":"/Users/rextang/Desktop/ECE651/Project/EasyQ/Frontend/EasyQ/node_modules/vue-loader/lib/index.js","mtime":1647973716572}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}