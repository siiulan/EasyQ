{"remainingRequest":"/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/src/views/Instructor/InstructorCourseDetail.vue?vue&type=template&id=cbbbe9de&scoped=true&","dependencies":[{"path":"/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/src/views/Instructor/InstructorCourseDetail.vue","mtime":1647457473518},{"path":"/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/cache-loader/dist/cjs.js","mtime":1647161676561},{"path":"/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647161677861},{"path":"/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/cache-loader/dist/cjs.js","mtime":1647161676561},{"path":"/Users/xushuoni/Desktop/ECE651/web/Frontend/EasyQ/node_modules/vue-loader/lib/index.js","mtime":1647161677476}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}